using System;
using System.Collections.Generic;
using System.IO;
using System.Xml;

namespace ASEva.Utility
{
    #pragma warning disable CS1571

    /// \~English
    /// <summary>
    /// (api:app=3.0.0) Generation's processing status
    /// </summary>
    /// \~Chinese
    /// <summary>
    /// (api:app=3.0.0) Generation的状态信息
    /// </summary>
    public enum GenerationProcessStatus
    {
        /// \~English
        /// <summary>
        /// Unknown (That generated by older application doesn't have status)
        /// </summary>
        /// \~Chinese
        /// <summary>
        /// 未知（在较老版本中输出的Generation不包括状态信息）
        /// </summary>
        Unknown,

        /// \~English
        /// <summary>
        /// Processing finished
        /// </summary>
        /// \~Chinese
        /// <summary>
        /// 处理完毕
        /// </summary>
        Finished,

        /// \~English
        /// <summary>
        /// Processing unfinished (Canceled by user or automatically skipped while processing)
        /// </summary>
        /// \~Chinese
        /// <summary>
        /// 未处理完毕（在处理过程中手动停止或卡死自动跳过导致）
        /// </summary>
        NotFinished,
    }

    /// \~English
    /// <summary>
    /// (api:app=3.0.0) Object for reading and writing generation's info file (info.xml)
    /// </summary>
    /// \~Chinese
    /// <summary>
    /// (api:app=3.0.0) 读写Generation的信息文件(info.xml)
    /// </summary>
    public class GenerationInfo
    {
        /// \~English
        /// <summary>
        /// File path
        /// </summary>
        /// \~Chinese
        /// <summary>
        /// 文件路径
        /// </summary>
        public String FilePath { get; set; }

        /// \~English
        /// <summary>
        /// Generation ID
        /// </summary>
        /// \~Chinese
        /// <summary>
        /// Generation ID
        /// </summary>
        public String GenerationID { get; set; }

        /// \~English
        /// <summary>
        /// Processing status info
        /// </summary>
        /// \~Chinese
        /// <summary>
        /// 状态信息
        /// </summary>
        public GenerationProcessStatus ProcessStatus { get; set; } = GenerationProcessStatus.Unknown;

        /// \~English
        /// <summary>
        /// Dictionary of sample alias
        /// </summary>
        /// \~Chinese
        /// <summary>
        /// 样本别名表
        /// </summary>
        public Dictionary<string, string> SampleAlias { get; set; } = [];

        /// \~English
        /// <summary>
        /// Versions of software that created the generation
        /// </summary>
        /// \~Chinese
        /// <summary>
        /// 创建Generation的软件版本信息（用于回溯）
        /// </summary>
        public Dictionary<string, Version> Versions { get; set; } = [];

        /// \~English
        /// <summary>
        /// Generation update logs
        /// </summary>
        /// \~Chinese
        /// <summary>
        /// Generation更新记录
        /// </summary>
        public Dictionary<DateTime, string> UpdateLogs { get; set; } = [];

        /// \~English
        /// <summary>
        /// Satellite posix time model used while creating the generation
        /// </summary>
        /// \~Chinese
        /// <summary>
        /// Generation生成时使用或覆盖的卫星Posix时间模型
        /// </summary>
        public PosixTimeModel? GNSSPosixModel { get; set; }

        /// \~English
        /// <summary>
        /// Whether host machine is synchronized with time server while creating the generation
        /// </summary>
        /// \~Chinese
        /// <summary>
        /// Generation生成时主机是否配置为与授时服务器同步
        /// </summary>
        public bool HostSync { get; set; }

        /// \~English
        /// <summary>
        /// IDs of the guest synchronized with time server while creating the generation
        /// </summary>
        /// \~Chinese
        /// <summary>
        /// Generation生成时被配置为与授时服务器同步的所有客机同步ID
        /// </summary>
        public String[] GuestSyncIDs { get; set; } = [];

        /// \~English
        /// <summary>
        /// Create generation info object (Not write to file)
        /// </summary>
        /// <param name="filePath">File path</param>
        /// <param name="generationID">Generation ID</param>
        /// <param name="status">Processing status</param>
        /// <param name="versions">Versions of software that created the generation</param>
        /// <returns>Created generation info object</returns>
        /// \~Chinese
        /// <summary>
        /// 创建信息文件对象（仅创建对象，不写入文件）
        /// </summary>
        /// <param name="filePath">文件路径</param>
        /// <param name="generationID">Generation ID</param>
        /// <param name="status">状态信息</param>
        /// <param name="versions">生成Generation的软件版本信息</param>
        /// <returns>返回创建的对象</returns>
        public static GenerationInfo? Create(String filePath, String generationID, GenerationProcessStatus status, Dictionary<string, Version>? versions)
        {
            return Create(filePath, generationID, status, null, versions, null, null, false, null);
        }

        /// \~English
        /// <summary>
        /// Create generation info object (Not write to file)
        /// </summary>
        /// <param name="filePath">File path</param>
        /// <param name="generationID">Generation ID</param>
        /// <param name="status">Processing status</param>
        /// <param name="sampleAlias">Dictionary of sample alias</param>
        /// <param name="versions">Versions of software that created the generation</param>
        /// <param name="updateLogs">Generation's update logs</param>
        /// <returns>Created generation info object</returns>
        /// \~Chinese
        /// <summary>
        /// 创建信息文件对象（仅创建对象，不写入文件）
        /// </summary>
        /// <param name="filePath">文件路径</param>
        /// <param name="generationID">Generation ID</param>
        /// <param name="status">状态信息</param>
        /// <param name="sampleAlias">样本别名表</param>
        /// <param name="versions">生成Generation的软件版本信息</param>
        /// <param name="updateLogs">Generation更新记录</param>
        /// <returns>返回创建的对象</returns>
        public static GenerationInfo? Create(String filePath, String generationID, GenerationProcessStatus status, Dictionary<string, string>? sampleAlias, Dictionary<string, Version>? versions, Dictionary<DateTime, string>? updateLogs)
        {
            return Create(filePath, generationID, status, sampleAlias, versions, updateLogs, null, false, null);
        }

        /// \~English
        /// <summary>
        /// Create generation info object (Not write to file)
        /// </summary>
        /// <param name="filePath">File path</param>
        /// <param name="generationID">Generation ID</param>
        /// <param name="status">Processing status</param>
        /// <param name="sampleAlias">Dictionary of sample alias</param>
        /// <param name="versions">Versions of software that created the generation</param>
        /// <param name="updateLogs">Generation's update logs</param>
        /// <param name="gnssPosixModel">Satellite posix time model used while creating the generation</param>
        /// <param name="hostSync">Whether host machine is synchronized with time server while creating the generation</param>
        /// <param name="guestSyncIDs">IDs of the guest synchronized with time server while creating the generation</param>
        /// <returns>Created generation info object</returns>
        /// \~Chinese
        /// <summary>
        /// 创建信息文件对象（仅创建对象，不写入文件）
        /// </summary>
        /// <param name="filePath">文件路径</param>
        /// <param name="generationID">Generation ID</param>
        /// <param name="status">状态信息</param>
        /// <param name="sampleAlias">样本别名表</param>
        /// <param name="versions">生成Generation的软件版本信息</param>
        /// <param name="updateLogs">Generation更新记录</param>
        /// <param name="gnssPosixModel">Generation生成时使用或覆盖的卫星Posix时间模型</param>
        /// <param name="hostSync">Generation生成时主机是否配置为与授时服务器同步</param>
        /// <param name="guestSyncIDs">Generation生成时被配置为与授时服务器同步的所有客机同步ID</param>
        /// <returns>返回创建的对象</returns>
        public static GenerationInfo? Create(String filePath, String generationID, GenerationProcessStatus status, Dictionary<string, string>? sampleAlias, Dictionary<string, Version>? versions, Dictionary<DateTime, string>? updateLogs, PosixTimeModel? gnssPosixModel, bool hostSync, String[]? guestSyncIDs)
        {
            if (filePath.Length == 0 || generationID.Length == 0) return null;

            var info = new GenerationInfo(filePath, generationID);
            info.ProcessStatus = status;
            if (sampleAlias != null) info.SampleAlias = sampleAlias;
            if (versions != null) info.Versions = versions;
            if (updateLogs != null) info.UpdateLogs = updateLogs;
            info.GNSSPosixModel = gnssPosixModel;
            info.HostSync = hostSync;
            if (guestSyncIDs != null) info.GuestSyncIDs = guestSyncIDs;

            return info;
        }

        /// \~English
        /// <summary>
        /// Load from file
        /// </summary>
        /// <param name="filePath">File path</param>
        /// <returns>Created generation info object</returns>
        /// \~Chinese
        /// <summary>
        /// 从已有信息文件中读取
        /// </summary>
        /// <param name="filePath">文件路径</param>
        /// <returns>返回创建的对象</returns>
        public static GenerationInfo? Load(String filePath)
        {
            if (filePath.Length == 0) return null;

            var defaultGenID = Path.GetFileNameWithoutExtension(Path.GetDirectoryName(filePath));
            if (defaultGenID == null || defaultGenID.Length == 0) return null;

            GenerationInfo? info = null;
            try
            {
                var xml = new XmlDocument();
                xml.Load(filePath);
                var attribs = xml.DocumentElement?.Attributes;
                if (attribs != null)
                {
                    var genIDAttrib = attribs["gen_id"];
                    var genID = genIDAttrib == null ? defaultGenID : genIDAttrib.Value;
                    info = new GenerationInfo(filePath, genID);

                    if (attribs["finished"] != null)
                    {
                        info.ProcessStatus = attribs["finished"]?.Value == "yes" ? GenerationProcessStatus.Finished : GenerationProcessStatus.NotFinished;
                    }
                    else
                    {
                        info.ProcessStatus = GenerationProcessStatus.Unknown;
                    }

                    info.SampleAlias = [];
                    var aliasNodes = xml.DocumentElement?.GetElementsByTagName("alias");
                    if (aliasNodes != null)
                    {
                        foreach (XmlElement aliasNode in aliasNodes)
                        {
                            var id = aliasNode.Attributes["sample"];
                            if (id != null) info.SampleAlias[id.Value] = aliasNode.InnerText;
                        }
                    }

                    info.Versions = [];
                    var versionNodes = xml.DocumentElement?.GetElementsByTagName("version");
                    if (versionNodes != null)
                    {
                        foreach (XmlElement versionNode in versionNodes)
                        {
                            var key = versionNode.Attributes["key"];
                            if (key != null) info.Versions[key.Value] = Version.Parse(versionNode.InnerText);
                        }
                    }

                    info.UpdateLogs = [];
                    var updateNodes = xml.DocumentElement?.GetElementsByTagName("update");
                    if (updateNodes != null)
                    {
                        foreach (XmlElement updateNode in updateNodes)
                        {
                            var time = updateNode.Attributes["time"];
                            if (time != null) info.UpdateLogs[DateTime.ParseExact(time.Value, "yyyy-MM-dd-HH-mm-ss", null)] = updateNode.InnerText;
                        }
                    }

                    try
                    {
                        var startPosix = attribs["start_posix_gnss"];
                        var timeRatio = attribs["time_ratio_gnss"];
                        if (startPosix != null && timeRatio != null)
                        {
                            info.GNSSPosixModel = new PosixTimeModel
                            {
                                StartPosix = Convert.ToUInt64(startPosix.Value),
                                TimeRatio = Convert.ToDouble(timeRatio.Value),
                            };
                        }
                        else info.GNSSPosixModel = null;
                    }
                    catch (Exception ex) { Dump.Exception(ex); info.GNSSPosixModel = null; }

                    var hostSyncAttrib = attribs["host_sync"];
                    if (hostSyncAttrib != null)
                    {
                        info.HostSync = hostSyncAttrib.Value == "yes";
                    }
                    else info.HostSync = false;

                    var guestSyncList = new List<String>();
                    var guestSyncNodes = xml.DocumentElement?.GetElementsByTagName("guest_sync");
                    if (guestSyncNodes != null)
                    {
                        foreach (XmlElement guestSyncNode in guestSyncNodes)
                        {
                            if (guestSyncNode.InnerText.Length > 0) guestSyncList.Add(guestSyncNode.InnerText);
                        }
                    }
                    info.GuestSyncIDs = guestSyncList.ToArray();
                }
            }
            catch (Exception ex) { Dump.Exception(ex); }

            if (info == null) info = new GenerationInfo(filePath, defaultGenID);
            return info;
        }

        /// \~English
        /// <summary>
        /// Save to file
        /// </summary>
        /// \~Chinese
        /// <summary>
        /// 保存信息文件
        /// </summary>
        public void Save()
        {
            if (ProcessStatus == GenerationProcessStatus.Unknown) return;

            try
            {
                var root = Path.GetDirectoryName(FilePath);
                if (root != null && !Directory.Exists(root)) Directory.CreateDirectory(root);
            }
            catch (Exception ex) { Dump.Exception(ex); return; }

            var xml = new XmlDocument();
            xml.AppendChild(xml.CreateXmlDeclaration("1.0", "utf-8", null));
            var rootNode = xml.AppendChild(xml.CreateElement("root")) as XmlElement;
            if (rootNode == null) return;

            rootNode.Attributes.Append(xml.CreateAttribute("gen_id")).Value = GenerationID;
            rootNode.Attributes.Append(xml.CreateAttribute("finished")).Value = ProcessStatus == GenerationProcessStatus.Finished ? "yes" : "no";

            foreach (var alias in SampleAlias)
            {
                var aliasNode = rootNode.AppendChild(xml.CreateElement("alias")) as XmlElement;
                if (aliasNode == null) continue;
                aliasNode.Attributes.Append(xml.CreateAttribute("sample")).Value = alias.Key;
                aliasNode.InnerText = alias.Value;
            }

            foreach (var item in Versions)
            {
                var versionNode = rootNode.AppendChild(xml.CreateElement("version")) as XmlElement;
                if (versionNode == null) continue;
                versionNode.Attributes.Append(xml.CreateAttribute("key")).Value = item.Key;
                versionNode.InnerText = item.Value.ToString();
            }

            foreach (var update in UpdateLogs)
            {
                var updateNode = rootNode.AppendChild(xml.CreateElement("update")) as XmlElement;
                if (updateNode == null) continue;
                updateNode.Attributes.Append(xml.CreateAttribute("time")).Value = update.Key.ToString("yyyy-MM-dd-HH-mm-ss");
                updateNode.InnerText = update.Value;
            }

            if (GNSSPosixModel != null)
            {
                rootNode.Attributes.Append(xml.CreateAttribute("start_posix_gnss")).Value = GNSSPosixModel.StartPosix.ToString();
                rootNode.Attributes.Append(xml.CreateAttribute("time_ratio_gnss")).Value = GNSSPosixModel.TimeRatio.ToString();
            }

            rootNode.Attributes.Append(xml.CreateAttribute("host_sync")).Value = HostSync ? "yes" : "no";

            foreach (var id in GuestSyncIDs)
            {
                if (id.Length == 0) continue;
                var guestSyncNode = rootNode.AppendChild(xml.CreateElement("guest_sync"));
                if (guestSyncNode == null) continue;
                guestSyncNode.InnerText = id;
            }

            try
            {
                xml.Save(FilePath);
                return;
            }
            catch (Exception ex) { Dump.Exception(ex); }

            if (File.Exists(FilePath))
            {
                try
                {
                    File.Delete(FilePath);
                    xml.Save(FilePath);
                }
                catch (Exception ex) { Dump.Exception(ex); }
            }
        }

        private GenerationInfo(String filePath, String generationID)
        {
            FilePath = filePath;
            GenerationID = generationID;
        }
    }
}
